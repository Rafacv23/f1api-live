---
interface Props {
    fpResults: any
    fpSession: "fp1" | "fp2" | "fp3"
}

const { fpResults, fpSession } = Astro.props;

const results = fpResults?.races?.[`${fpSession}Results`]

// Function to generate positions based on time
const generatePositions = (results: any[]): any[] => {
    return results
        .map((result: any) => ({ ...result, time: result.time }))
        .sort((a, b) => a.time - b.time) // Sort by time
        .map((result, index) => ({ ...result, position: index + 1 })); // Assign position based on sorted order
};

const processedResults = generatePositions(results);

---
<div class="relative overflow-x-auto mb-8">
    <table class="min-w-full border border-gray-200 shadow-md rounded-lg overflow-hidden">
        <thead class="bg-secondary text-primary uppercase text-sm font-semibold">
            <tr>
                <th class="py-5 px-3 text-left">Position</th>
                <th class="py-5 px-3 text-left">Driver</th>
                <th class="px-3 text-left">Team</th>
                <th class="px-3 text-left">Time</th>
            </tr>
        </thead>
        <tbody class="divide-y">
            {processedResults.map((result: any) => (
                <tr class="hover:bg-secondary/10 transition">
                    <td class="py-5 px-3 font-medium">{result.position}</td>
                    <td class="px-3">{result.driver.name} {result.driver.surname}</td>
                    <td class="px-3">{result.team.teamName}</td>
                    <td class="px-3 font-semibold">{result.time}</td>
                </tr>
            ))}
        </tbody>
    </table>
</div>