---
import QualyTable from "@/components/QualyTable.astro";
import SessionNav from "@/components/SessionNav.astro";
import Layout from "@/layouts/Layout.astro";
import { f1api } from "@/lib/f1Api";
import { checkSprint } from "@/lib/utils";

export async function getStaticPaths() {
  const seasons = await f1api.getSeasons({limit:1});
  const currentYear = new Date().getFullYear();

  const staticPaths = [];

  for (const season of seasons.championships) {
    if (season.year < currentYear) {
      const races = await f1api.getRacesByYear({ year: season.year });

      for (const race of races.races) {
        staticPaths.push({
          params: { year: season.year, round: race.round.toString() },
          props: { year: season.year, round: race.round.toString() },
        });
      }
    }
  }

  return staticPaths;
}

const { year, round } = Astro.params;

// retrieve qualifying results
let qualy;
let raceInfo

if(year && round){
    raceInfo = await f1api.getRaceInfo({year: year, round: parseInt(round)})

    try {
        qualy = await f1api.getQualyResults({year: year, round: parseInt(round)})
    } catch (error) {
        console.error(`Qualifying results not found for ${year}, round ${round}`);
    }
}

const haveSprint = checkSprint(raceInfo)
---

<Layout>
    <div class="mb-8">
        {raceInfo?.race.map((race) => 
        <h1>Qualifying - {race?.circuit.country} {year}</h1>
        <SessionNav year={year} round={round} haveSprint={haveSprint} />
        <p>{race?.schedule.qualy.date}, {race?.circuit.circuitName}, round {race?.round}</p>
        )}
    </div>
    {qualy ? (
        <QualyTable qualyResults={qualy} />
    ) : (
        <p>Session data is not available at the moment.</p>
    )}
</Layout>